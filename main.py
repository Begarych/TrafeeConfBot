import asyncio

import telebot.types
# import telebot.types
from telebot import TeleBot
from telebot.types import (ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton,
                           ReplyKeyboardRemove)
from telebot.async_telebot import AsyncTeleBot
from utils import Registry
from config import TOKEN, allowed_user_ids
from time import sleep

# bot = AsyncTeleBot(TOKEN)
bot = TeleBot(TOKEN)
session = Registry()


@bot.message_handler(commands=['start'])
def start(message: telebot.types.Message):
    # session.register_status = False
    session.user_id = message.from_user.id
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(KeyboardButton("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å"))
    bot.send_message(message.chat.id, text=f'–ü—Ä–∏–≤–µ—Ç, {message.chat.first_name}! üôã‚Äç‚ôÇ\n\nÔ∏è–≠—Ç–æ Trafee Conf Bot, –∫–æ—Ç–æ—Ä—ã–π '
                                                 f'–ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ —Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π –Ω–∞ –∫–æ–Ω–∫—É—Ä—Å. –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –∂–º–∏ –∫–Ω–æ–ø–∫—É '
                                                 f'"–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å" –Ω–∏–∂–µ ‚¨áÔ∏è',
                                                 reply_markup=markup)


@bot.message_handler(commands=['broadcast'])
def broadcast_message(message: telebot.types.Message):
    if message.from_user.id not in allowed_user_ids:
        bot.reply_to(message, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    if not session.get_xml_field("id"):
        bot.reply_to(message, "xml —Ñ–∞–π–ª –ø—É—Å—Ç–æ–π")
        return
    session.broadcast_status = True
    bot.send_message(message.chat.id, text="–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏")


@bot.message_handler(func=lambda message: session.broadcast_status and message.from_user.id in allowed_user_ids)
def distribution(message: telebot.types.Message):
    for user in session.get_xml_field("id"):
        try:
            bot.send_message(user, message.text)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user}: {e}")
    session.broadcast_status = False


@bot.message_handler(func=lambda message: message.text == "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å")
def instruction(message: telebot.types.Message):
    bot.send_message(message.chat.id, text="üì® –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã\n\n –ü—Ä–∏–º–µ—Ä: example@example.com",
                           reply_markup=ReplyKeyboardRemove())
    session.message_status[message.chat.id] = "waiting"


@bot.message_handler(func=lambda message: session.message_status[message.chat.id] == "waiting")
def user_data_handler(message: telebot.types.Message):
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(KeyboardButton("–î–∞"), KeyboardButton("–ù–µ—Ç"))
    session.user_mail = message.text
    bot.send_message(message.chat.id, text=f"–≠—Ç–æ –≤–∞—à —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π –∞–¥—Ä–µ—Å: \n{session.user_mail}", reply_markup=markup)
    session.message_status[message.chat.id] = "done"


@bot.message_handler(func=lambda message: message.text == "–ù–µ—Ç")
def try_again(message: telebot.types.Message):
    session.user_mail = None
    instruction(message)


@bot.message_handler(func=lambda message: message.text == "–î–∞" and not session.register_status)
def confirmed(message: telebot.types.Message):
    session.write_to_xml(message.chat.first_name, str(session.user_id), session.user_mail)
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton(url="https://www.trafee.com/publisher/register", text="–°—Å—ã–ª–∫–∞"))
    session.register_status = True
    bot.send_message(message.chat.id, text=f"üì© –í–∞—à –∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω.",
                           reply_markup=ReplyKeyboardRemove())
    bot.send_message(message.chat.id, text=f"–ß—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ",
                           reply_markup=keyboard)
    sleep(10)
    bot.send_message(message.chat.id, text="–ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Å–≤–æ–π —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π –∞–¥—Ä–µ—Å. –¢–∞–∫–∂–µ, "
                                                 "–ø—Ä–∏–≥–ª–∞—à–∞–µ–º –≤–∞—Å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –Ω–∞—à–µ–º—É Telegram-–∫–∞–Ω–∞–ª—É üì≤, –≥–¥–µ —Å–µ–π—á–∞—Å "
                                                 "–∏–¥–µ—Ç —Ç–æ–ø–æ–≤—ã–π —Ä–æ–∑—ã–≥—Ä—ã—à –ø—Ä–µ–º–∏—É–º-–∞–∫–∫–∞—É–Ω—Ç–æ–≤. –ù–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ!\n"
                                                 "https://t.me/trafeeRuChanel",
                           reply_markup=ReplyKeyboardRemove())


@bot.message_handler(func=lambda message: session.register_status)
async def already_register(message: telebot.types.Message):
    bot.send_message(message.chat.id, text="–í—ã —É–∂–µ –±—ã–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã\n"
                                                 "–ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Å–≤–æ–π —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π –∞–¥—Ä–µ—Å. –¢–∞–∫–∂–µ, "
                                                 "–ø—Ä–∏–≥–ª–∞—à–∞–µ–º –≤–∞—Å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –Ω–∞—à–µ–º—É Telegram-–∫–∞–Ω–∞–ª—É üì≤, –≥–¥–µ —Å–µ–π—á–∞—Å "
                                                 "–∏–¥–µ—Ç —Ç–æ–ø–æ–≤—ã–π —Ä–æ–∑—ã–≥—Ä—ã—à –ø—Ä–µ–º–∏—É–º-–∞–∫–∫–∞—É–Ω—Ç–æ–≤. –ù–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ!\n"
                                                 "https://t.me/trafeeRuChanel"
                           )


@bot.message_handler(func=lambda message: True)
def useless(message: telebot.types.Message):
    bot.send_message(message.chat.id, text="–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Å—Ç–∞—Ä—Ç–∞ –±–æ—Ç–∞")


# asyncio.run(bot.polling(none_stop=True, skip_pending=True))


bot.polling(none_stop=True, skip_pending=True)
